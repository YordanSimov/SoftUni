using Microsoft.EntityFrameworkCore;
using P01_StudentSystem.Data.Models;
using System;
using System.Security.Cryptography.X509Certificates;

namespace P01_StudentSystem.Data
{
    public class StudentSystemContext : DbContext
    {
        public StudentSystemContext()
        {

        }
        public StudentSystemContext(DbContextOptions<StudentSystemContext> options) : base(options)
        {

        }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Homework> HomeworkSubmissions { get; set; }
        public virtual DbSet<StudentCourse> StudentCourses { get; set; }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(Configuration.ConnectionString);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Student>(entity =>
            {
                entity.HasKey(x => x.StudentId);

                entity.Property(x => x.Name).IsRequired(true).IsUnicode(true).HasMaxLength(100);

                entity.Property(x => x.PhoneNumber).IsRequired(false).IsUnicode(false);

            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasKey(x => x.CourseId);

                entity.Property(x => x.Name).IsRequired(true).IsUnicode(true).HasMaxLength(80);

                entity.Property(x => x.Description).IsRequired(false).IsUnicode(true);
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.HasKey(x => x.ResourceId);

                entity.Property(x => x.Name).IsRequired(true).IsUnicode(true).HasMaxLength(50);

                entity.Property(x => x.Url).IsRequired(true).IsUnicode(false);

                entity.HasOne(x => x.Course).WithMany(x => x.Resources).HasForeignKey(x => x.CourseId);
            });

            modelBuilder.Entity<Homework>(entity =>
            {
                entity.HasKey(x => x.HomeworkId);
                entity.Property(x => x.Content).IsRequired(true).IsUnicode(false);

                entity.HasOne(x => x.Student).WithMany(x => x.HomeworkSubmissions).HasForeignKey(x => x.StudentId);
                entity.HasOne(x => x.Course).WithMany(x => x.HomeworkSubmissions).HasForeignKey(x => x.CourseId);
            });

            modelBuilder.Entity<StudentCourse>(entity =>
            {
                entity.HasKey(x => new { x.CourseId, x.StudentId });

                entity.HasOne(x => x.Student).WithMany(x => x.CourseEnrollments).HasForeignKey(x => x.StudentId);

                entity.HasOne(x => x.Course).WithMany(x => x.StudentsEnrolled).HasForeignKey(x => x.CourseId);
            });
        }
    }
}
