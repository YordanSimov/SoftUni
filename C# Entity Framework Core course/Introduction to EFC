using SoftUni.Data;
using SoftUni.Models;
using System;
using System.Globalization;
using System.Linq;
using System.Text;

namespace SoftUni
{
    public class StartUp
    {
        static void Main(string[] args)
        {
            var context = new SoftUniContext();

            var result = RemoveTown(context);

            Console.WriteLine(result);

        }
        //ex 3
        public static string GetEmployeesFullInformation(SoftUniContext context)
        {
            var employeeInfo = context.Employees
                 .Select(x => new { x.EmployeeId, x.FirstName, x.LastName, x.MiddleName, x.JobTitle, x.Salary }).OrderBy(x => x.EmployeeId).ToList();

            var sb = new StringBuilder();

            foreach (var e in employeeInfo)
            {
                sb.AppendLine($"{e.FirstName} {e.LastName} {e.MiddleName} {e.JobTitle} {e.Salary:F2}");
            }
            return sb.ToString().TrimEnd();
        }
        //ex 4
        public static string GetEmployeesWithSalaryOver50000(SoftUniContext context)
        {
            StringBuilder sb = new StringBuilder();

            var employees = context.Employees.Select(x => new { x.FirstName, x.Salary }).Where(x => x.Salary > 50000).OrderBy(x => x.FirstName).ToList();

            foreach (var e in employees)
            {
                sb.AppendLine($"{e.FirstName} - {e.Salary:F2}");
            }

            return sb.ToString().TrimEnd();
        }
        //ex 5
        public static string GetEmployeesFromResearchAndDevelopment(SoftUniContext context)
        {
            StringBuilder sb = new StringBuilder();

            var employees = context.Employees.Where(x => x.Department.Name == "Research and Development")
                .Select(x => new { x.FirstName, x.LastName, DeparmentName = x.Department.Name, x.Salary })
                .OrderBy(x => x.Salary).ThenByDescending(x => x.FirstName)
                .ToList();

            foreach (var e in employees)
            {
                sb.AppendLine($"{e.FirstName} {e.LastName} from {e.DeparmentName} - ${e.Salary:F2}");
            }
            return sb.ToString().TrimEnd();
        }
        //ex 6
        public static string AddNewAddressToEmployee(SoftUniContext context)
        {
            StringBuilder sb = new StringBuilder();

            Address newAddress = new Address()
            {
                AddressText = "Vitoshka 15",
                TownId = 4
            };

            Employee employeeNakov = context.Employees.First(x => x.LastName == "Nakov");

            employeeNakov.Address = newAddress;

            context.SaveChanges();

            var addresses = context.Employees.OrderByDescending(x => x.AddressId).Take(10).Select(x => x.Address.AddressText).ToList();

            foreach (var a in addresses)
            {
                sb.AppendLine(a);
            }
            return sb.ToString().TrimEnd();
        }
        //ex 7
        public static string GetEmployeesInPeriod(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var employees = context.Employees
                .Where(ep => ep.EmployeesProjects.Any(x => x.Project.StartDate.Year >= 2001 && x.Project.StartDate.Year <= 2003))
                .Take(10).Select(e => new
                {
                    e.FirstName,
                    e.LastName,
                    ManagerFirstName = e.Manager.FirstName,
                    ManagerLastName = e.Manager.LastName,
                    Project = e.EmployeesProjects.Select(p => new
                    {
                        ProjectName = p.Project.Name,
                        StartDate = p.Project.StartDate.ToString("M/d/yyyy h:mm:ss tt", CultureInfo.InvariantCulture),
                        EndDate = p.Project.EndDate.HasValue ? p.Project.EndDate.Value.ToString("M/d/yyyy h:mm:ss tt", CultureInfo.InvariantCulture)
                        : "not finished"
                    }).ToList()
                }).ToList();

            foreach (var e in employees)
            {
                sb.AppendLine($"{e.FirstName} {e.LastName} - Manager: {e.ManagerFirstName} {e.ManagerLastName}");
                foreach (var ep in e.Project)
                {
                    sb.AppendLine($"--{ep.ProjectName} - {ep.StartDate} - {ep.EndDate}");
                }
            }
            return sb.ToString().TrimEnd();
        }
        //ex 8
        public static string GetAddressesByTown(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var addresses = context.Addresses.OrderByDescending(x => x.Employees.Count())
                .ThenBy(x => x.Town.Name).Take(10).Select(x => new
                {
                    x.AddressText,
                    TownName = x.Town.Name,
                    EmployeeCount = x.Employees.Count()
                }).ToList();

            foreach (var a in addresses)
            {
                sb.AppendLine($"{a.AddressText}, {a.TownName} - {a.EmployeeCount} employees");
            }
            return sb.ToString().TrimEnd();
        }

        //ex 9
        public static string GetEmployee147(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var employee147 = context.Employees.Where(x => x.EmployeeId == 147).Select(z => new
            {
                z.FirstName,
                z.LastName,
                z.JobTitle,
                Projects = z.EmployeesProjects.Select(e => e.Project.Name).OrderBy(pr => pr).ToList()
            }).Single();


            sb.AppendLine($"{employee147.FirstName} {employee147.LastName} - {employee147.JobTitle}");
            foreach (var pr in employee147.Projects)
            {
                sb.AppendLine(pr);
            }
            return sb.ToString().TrimEnd();
        }

        //ex 10

        public static string GetDepartmentsWithMoreThan5Employees(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var departments = context.Departments.Where(x => x.Employees.Count() > 5).OrderBy(x => x.Employees.Count()).ThenBy(x => x.Name).Select(x => new
            {
                x.Name,
                ManagerFirstName = x.Manager.FirstName,
                ManagerLastName = x.Manager.LastName,
                DepEmployees = x.Employees.Select(e => new
                {
                    EmployeeFirstName = e.FirstName,
                    EmployeeLastName = e.LastName,
                    e.JobTitle
                }).OrderBy(x => x.EmployeeFirstName).ThenBy(x => x.EmployeeLastName).ToList()
            }).ToList();

            foreach (var d in departments)
            {
                sb.AppendLine($"{d.Name} - {d.ManagerFirstName} {d.ManagerLastName}");
                foreach (var e in d.DepEmployees)
                {
                    sb.AppendLine($"{e.EmployeeFirstName} {e.EmployeeLastName} - {e.JobTitle}");
                }
            }
            return sb.ToString().TrimEnd();
        }
        //ex 11
        public static string GetLatestProjects(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var projects = context.Projects.OrderByDescending(x => x.StartDate).Take(10).Select(x => new
            {
                x.Name,
                x.Description,
                StartDate = x.StartDate.ToString("M/d/yyyy h:mm:ss tt", CultureInfo.InvariantCulture)
            }).OrderBy(x => x.Name).ToList();

            foreach (var p in projects)
            {
                sb.AppendLine(p.Name);
                sb.AppendLine(p.Description);
                sb.AppendLine(p.StartDate);
            }
            return sb.ToString().TrimEnd();
        }
        //ex 12
        public static string IncreaseSalaries(SoftUniContext context)
        {
            var sb = new StringBuilder();

            IQueryable<Employee> employees = context.Employees
              .Where(x => x.Department.Name == "Engineering" || x.Department.Name == "Tool Design"
              || x.Department.Name == "Marketing" || x.Department.Name == "Information Services");

            foreach (var e in employees)
            {
                e.Salary += e.Salary * 0.12m;
            }
            context.SaveChanges();

            var employeesInfo = employees.Select(x => new
            {
                x.FirstName,
                x.LastName,
                x.Salary
            }).OrderBy(x => x.FirstName).ThenBy(x => x.LastName).ToList();

            foreach (var e in employeesInfo)
            {
                sb.AppendLine($"{e.FirstName} {e.LastName} (${e.Salary:F2})");
            }
            return sb.ToString().TrimEnd();
        }
        //ex 13
        public static string GetEmployeesByFirstNameStartingWithSa(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var employees = context.Employees.Where(x => x.FirstName.StartsWith("Sa"))
                .OrderBy(x => x.FirstName).ThenBy(x => x.LastName)
                .Select(x => new
                {
                    x.FirstName,
                    x.LastName,
                    x.JobTitle,
                    x.Salary
                }).ToList();

            if (!employees.Any())
            {
                return "";
            }

            foreach (var e in employees)
            {
                sb.AppendLine($"{e.FirstName} {e.LastName} - {e.JobTitle} - (${e.Salary:F2})");
            }
            return sb.ToString().TrimEnd();
        }

        //ex 14

        public static string DeleteProjectById(SoftUniContext context)
        {
            var sb = new StringBuilder();

            var project = context.Projects.Find(2);
            var employeeProject = context.EmployeesProjects.Where(x => x.ProjectId == 2).ToList();

            context.EmployeesProjects.RemoveRange(employeeProject);
            context.Projects.Remove(project);
            context.SaveChanges();

            var projects = context.Projects.Take(10);

            foreach (var p in projects)
            {
                sb.AppendLine(p.Name);
            }
            return sb.ToString().TrimEnd();
        }
        //ex 15
        public static string RemoveTown(SoftUniContext context)
        {
            Town townToDel = context.Towns.First(x => x.Name == "Seattle");

            IQueryable<Address> addressesToDel = context.Addresses.Where(x => x.TownId == townToDel.TownId);

            int addressesCount = addressesToDel.Count();

            IQueryable<Employee> employeesOnDel = context.Employees.Where(x => addressesToDel.Any(a => a.AddressId == x.AddressId));

            foreach (var e in employeesOnDel)
            {
                e.AddressId = null;
            }
            foreach (var a in addressesToDel)
            {
                context.Addresses.Remove(a);
            }
            context.Towns.Remove(townToDel);
            context.SaveChanges();

            return $"{addressesCount} addresses in {townToDel.Name} were deleted";
        }
    }
}
