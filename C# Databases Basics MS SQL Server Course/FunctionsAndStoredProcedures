USE [SoftUni]

--ex 1
CREATE PROCEDURE usp_GetEmployeesSalaryAbove35000
AS
BEGIN
	SELECT FirstName, LastName FROM Employees
	WHERE Salary>35000
END

EXEC usp_GetEmployeesSalaryAbove35000;

GO

--ex 2
CREATE PROCEDURE usp_GetEmployeesSalaryAboveNumber @minSalary DECIMAL(18,4)
AS
BEGIN
	SELECT FirstName, LastName FROM Employees
	WHERE Salary>=@minSalary
END

EXEC usp_GetEmployeesSalaryAboveNumber 48100

GO

--ex 3
CREATE PROCEDURE usp_GetTownsStartingWith  @String NVARCHAR(MAX)
AS
BEGIN
	SELECT [Name] AS [Town] FROM Towns
	WHERE [Name] LIKE @String + '%'
END

EXEC usp_GetTownsStartingWith 'b'

GO

--ex 4
CREATE PROCEDURE usp_GetEmployeesFromTown   @TownName NVARCHAR(MAX)
AS
BEGIN
	SELECT FirstName, LastName FROM Employees AS e
	JOIN Addresses AS a ON e.AddressID = a.AddressID
	JOIN Towns AS t ON a.TownID = t.TownID
	WHERE t.[Name] LIKE @TownName
END

EXEC usp_GetEmployeesFromTown 'Sofia'

GO

--ex 5
CREATE FUNCTION ufn_GetSalaryLevel(@salary DECIMAL(18,4))
RETURNS VARCHAR(7)
AS
BEGIN
	DECLARE @result VARCHAR(7)
	IF(@salary<30000)
	BEGIN
	SET @result = 'Low'
	END

	ELSE IF(@salary BETWEEN 30000 AND 50000 )
	BEGIN
	SET @result = 'Average'
	END

	ELSE
	BEGIN
	SET @result = 'High'
	END

	RETURN @result
END

GO

SELECT Salary, 
		dbo.ufn_GetSalaryLevel(Salary) AS [Salary Level] 
		FROM Employees

--ex 6
CREATE PROCEDURE usp_EmployeesBySalaryLevel @SalaryLevel VARCHAR(7)
AS
BEGIN
	SELECT FirstName, LastName FROM Employees
		WHERE dbo.ufn_GetSalaryLevel(Salary) LIKE @SalaryLevel
END

EXEC usp_EmployeesBySalaryLevel 'High'
--ex 7
CREATE FUNCTION ufn_IsWordComprised(@setOfLetters NVARCHAR(30), @word NVARCHAR(20))
RETURNS BIT
AS
BEGIN 
	DECLARE @index INT = 1;
	DECLARE @result BIT = 1;

	WHILE @index <= LEN(@word)
	BEGIN

	DECLARE  @symbol NVARCHAR = SUBSTRING(@word, @index, 1);
	DECLARE  @foundIndex INT = CHARINDEX(@symbol, @setOfLetters);

	IF(@foundIndex = 0)
	BEGIN
		SET @result = 0;
	END

	SET @index = @index + 1;

	END

	RETURN @result;

END

GO

--ex 8
CREATE PROCEDURE usp_DeleteEmployeesFromDepartment (@departmentId INT) 
AS
BEGIN

	DELETE FROM EmployeesProjects
	WHERE EmployeeID IN
			(SELECT EmployeeID FROM Employees
			WHERE DepartmentID = @departmentId)

	UPDATE Employees
	SET ManagerID = NULL
	WHERE ManagerID IN 
			(SELECT EmployeeID FROM Employees
			WHERE DepartmentID = @departmentId)
	
	ALTER TABLE Departments
	ALTER COLUMN ManagerID INT

	UPDATE Departments
	SET ManagerID = NULL
	WHERE ManagerID IN 
			(SELECT EmployeeID FROM Employees
			WHERE DepartmentID = @departmentId)

	DELETE FROM Employees
	WHERE DepartmentID=@departmentID

	DELETE FROM Departments
	WHERE DepartmentID=@departmentID

	SELECT COUNT(*) FROM Employees
	WHERE DepartmentID=@departmentID

END

--ex 9
USE [Bank]

CREATE PROCEDURE usp_GetHoldersFullName 
AS
BEGIN
	SELECT FirstName + ' ' + LastName AS [FullName] FROM AccountHolders
END

EXEC usp_GetHoldersFullName

GO
--ex 10
CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan (@minBalance DECIMAL(18,4))
AS
BEGIN
		SELECT FirstName, LastName FROM Accounts AS a
		JOIN AccountHolders as ah 
		ON a.AccountHolderId=ah.Id
		GROUP BY FirstName, LastName
		HAVING SUM(Balance) > @minBalance		
		ORDER BY FirstName, LastName
END

EXEC usp_GetHoldersWithBalanceHigherThan 2500

GO

--ex 11
CREATE FUNCTION ufn_CalculateFutureValue (@initialSum DECIMAL(18,4),@yearlyInterestRate FLOAT,@years INT)
RETURNS DECIMAL(18,4)
AS
BEGIN
	DECLARE @result DECIMAL(18,4)=@initialSum * POWER((1 + @yearlyInterestRate),@years)
	RETURN @result
END

SELECT dbo.ufn_CalculateFutureValue(1000, 0.1, 5)

GO
--ex 12
CREATE PROCEDURE usp_CalculateFutureValueForAccount @Id INT, @yIR FLOAT
AS 
BEGIN
	SELECT a.Id,ah.FirstName,ah.LastName, a.Balance,
		   dbo.ufn_CalculateFutureValue(a.Balance, @yIR, 5)
		   AS [Balance in 5 years]
	FROM AccountHolders AS ah
	JOIN Accounts AS a ON ah.Id = a.AccountHolderId
	WHERE a.Id = @Id 
END

EXEC usp_CalculateFutureValueForAccount 1,0.1

--ex 13

CREATE FUNCTION ufn_CashInUsersGames(@gameName NVARCHAR(50))
RETURNS TABLE
AS
RETURN SELECT(SELECT SUM(Cash) AS [SumCash] FROM ( SELECT g.[Name],
                       ug.Cash,
	                   ROW_NUMBER() OVER(PARTITION BY g.[Name] ORDER BY ug.Cash DESC) AS [RowNum]
                       FROM Games AS g 
                       JOIN UsersGames AS ug ON g.Id = ug.GameId
                       WHERE g.[Name] = @gameName) AS [RowNumQuery]
              WHERE [RowNum] % 2 <> 0) AS [SumCash]
